MetaCC - Meta Compiler Compiler v0.5.0.0
----

- lyc를 lycpp로 변경하는 프로젝트 시작.

- out 폴더에 대해 CMakeLists.txt 작성 시작.

- 파서 이름이 sv_parser였던 것을 mcc_parser로 변경.
> 변경하면서 일어난 문제 해결.

- v0.4.2.0에서 논의되었던 문제는 반드시 해결해야 한다.

- 꼬여서 한 번 더 커밋.


end.


MetaCC - Meta Compiler Compiler v0.4.2.3
----

- v0.4.2.0에서 논의되었던 문제는 반드시 해결해야 한다.
! key_attributes를 쓸 때가 드디어 왔다.
  이 개선은 다음과 같이 이루어지는 것으로 하자.
  module_keyword TYPE( "token_str" )
      : "module"
      | "macromodule"
      ;
! 최소한 토큰에 한해서는 TOKEN_0과 같은 간접적인 이름 대선 직접적인 이름이 필요하다.


- temporary commit.


end.


MetaCC - Meta Compiler Compiler v0.4.2.2
----

- Lexer에 Number 정의 추가.

- v0.4.2.0에서 논의되었던 문제는 반드시 해결해야 한다.
! key_attributes를 쓸 때가 드디어 왔다.
  이 개선은 다음과 같이 이루어지는 것으로 하자.
  module_keyword TYPE( "token_str" )
      : "module"
      | "macromodule"
      ;
! 최소한 토큰에 한해서는 TOKEN_0과 같은 간접적인 이름 대선 직접적인 이름이 필요하다.


end.


MetaCC - Meta Compiler Compiler v0.4.2.1
----

- 심볼 리스트 수정.
> 빠진 정의 추가.
> 불필요한 정의 삭제.

- bison 버전 업데이트.
> 이전에 사용하던 bison++가 버전이 낮아 Too many gotos 오류가 발생함.
  최신 버전의 bison(not bison++)를 설치했더니 C++에서도 오류 없이 잘 컴파일 됨.

- v0.4.2.0에서 논의되었던 문제는 반드시 해결해야 한다.
! key_attributes를 쓸 때가 드디어 왔다.
  이 개선은 다음과 같이 이루어지는 것으로 하자.
  module_keyword TYPE( "token_str" )
      : "module"
      | "macromodule"
      ;
! 최소한 토큰에 한해서는 TOKEN_0과 같은 간접적인 이름 대선 직접적인 이름이 필요하다.


end.



MetaCC - Meta Compiler Compiler v0.4.2.0 (IMPORTANT)
----

- 최초의 SystemVerilog 코드 파싱 성공!


! key_attributes를 쓸 때가 드디어 왔다.
> module_keyword의 경우 다음과 같이 정의된다.
  module_keyword
      : "module"
      | "macromodule"
      ;
  이를 보면 module_keyword는 굳이 AST 형식의 개체로 정의될 필요 없이 바로 token_str 필드를 거쳐 C String으로 반환되는 것이 훨씬 나음.
  다른 identifier 들에 대해서도 마찬가지다. 불필요한 중간 단계가 줄어 성능도 오르고 표현도 간결해진다.
  
  이 개선은 다음과 같이 이루어지는 것으로 하자.
  module_keyword TYPE( "token_str" )
      : "module"
      | "macromodule"
      ;
  이 속성에 의해 .y 파일의 심볼 토큰 형식은 다음과 같이 바뀐다.
  %type <token_str> module_keyword
  .y 파일의 심볼 이벤트 액션은 다음과 같이 바뀐다.
  module_keyword
      : "module"
      {
          $$ = $1;
      }
      | "macromodule"
      {
          $$ = $1;
      }
      ;
  심볼 정의에 대한 추상 트리가 더 이상 필요하지 않으므로 struct ast_module_keyword는 삭제된다.
  이전과 달리 new (module_keyword); 구문으로 새 module_keyword를 할당하지 않고 바로 문자열의 주소를 반환할 수 있다.


! 최소한 토큰에 한해서는 TOKEN_0과 같은 간접적인 이름 대선 직접적인 이름이 필요하다.
  더 이상 심볼 순회 시에 간접 참조를 사용하지 않는 것도 있고, 그렇다 하더라도
  마지막 토큰 순회 시에 문자열을 대체하는 것으로 해결 볼 수 있지 않나 함.


end.



MetaCC - Meta Compiler Compiler v0.4.1.1 (IMPORTANT)
----

- 계산기 예제 성공!

- after 코드를 삽입하여, 새롭게 정의해야 하는 토큰에 대해 처리하는 방법을 마련함.

end.


MetaCC - Meta Compiler Compiler v0.4.1.0 (COMPLETE)
----

- 잘 동작하는 계산기 예제 작성 완료.

- 리스트, 옵션, 스타에 대해 자동으로 추상 구문 트리 개체를 생성하는 코드 작성.

* !!!!! IMPORTANT !!!!!
  자꾸 이상한 출력이 찌끄러기처럼 나온다면 렉서를 의심할 것!
> 방금 발견한 것 중의 하나는, 공백 문자 제거를 위해 작성한 다음 코드가 문제여서
  계속 이상한 공백 문자가 남은 채로 출력되었다.
  " \r\t" ;
  잠깐 보면 뭐가 이상한가 싶지만, 세 문자 중 하나를 고르는 것이니 이렇게 써야 맞음.
  [ \r\t] ;


end.

MetaCC - Meta Compiler Compiler v0.4.0.1
----

- 리스트가 출력되지 않던 버그 수정.


end.


MetaCC - Meta Compiler Compiler v0.4.0.0
----

- 심볼에 대해 자동으로 추상 구문 트리 개체를 생성하는 코드 작성.
> 리스트, 옵션, 스타에 대해서도 구현 예정.

- 기존 예제가 디버깅이 어려워서, 훨씬 간편하게 내용을 볼 수 있는 계산기 예제를 추가함.
> 꽤 재밌음.


end.


MetaCC - Meta Compiler Compiler v0.3.3.1 (COMPLETE)
----

- 실행 가능한 최초의 MetaCC 구현 완료.


end.


MetaCC - Meta Compiler Compiler v0.3.3.0 (IMPORTANT)
----

- 리스트 중복 문제 해결함!

* !!!!! IMPORTANT !!!!!
  문자열 클래스 비교 시에 포인터끼리 값을 비교하는 참사 발생..!
  ast_common.cpp -> 729
> 다음은 이전에 정의된 비교 코드이다.
  if (this->list_parameter_delim() != p2->list_parameter_delim()) { ... }
  얼핏 봐서는 전혀 문제 없고, Java나 C#에서도 전혀 문제 없을 것 같은 이 코드가
  여기서 매우 심각한 문제를 일으켰는데, 바로 list_parameter_delim()의 정의가 다음과 같았던 것!
  mcc_string *list_parameter_delim() { return _list_parameter_delim; }
  따라서 위 조건문에서 문자열끼리의 비교가 아닌 포인터 비교를 수행하고,
  포인터 값이 서로 같을 리가 없기 때문에 항상 FAIL이 발생했던 것이다.
>> 매우 중요한 내용이므로 기록 후 커밋까지 수행한다.
  

end.


MetaCC - Meta Compiler Compiler v0.3.2.2
----

- 요소 자체로 변환 완료.

end.


MetaCC - Meta Compiler Compiler v0.3.2.1
----

- 심볼 정의 리스트 요소를 심볼 문자열로 대체하던 코드를 제거하고 그냥 요소 자체를 쓰기로 함.

- temporary commit.

end.


MetaCC - Meta Compiler Compiler v0.3.2.0
----

- 리스트 정의가 누락되는 건 해결함.

! 리스트 정의가 중복되는 문제 해결해야 함.

- ast.cpp 파일 정의 분리.
> ast_common.cpp
> ast_describe.cpp
> ast_glance.cpp
> ast_action.cpp

end.


MetaCC - Meta Compiler Compiler v0.3.1.1 (IMPORTANT)
----

* !!!!! IMPORTANT !!!!!
  C++ std::string을 C String으로 초기화할 때 반드시 C String Buffer를 비울 것.

- delete 구문 삭제.

! 거의 되는 것 같은데 리스트 정의가 중복되고 정의되어야 할 리스트만 정의에서 빠지는 문제만 해결하자.

end.


MetaCC - Meta Compiler Compiler v0.3.1.0 (IMPORTANT)
----

- 왜 되냐
> gvim으로 열었더니 됨...

! 리스트 요소가 전체가 안 나오는 문제만 해결하세요.

end.



MetaCC - Meta Compiler Compiler v0.3.0.8
----

- temporary commit.

end.


MetaCC - Meta Compiler Compiler v0.3.0.7
----

- temporary commit.

end.



MetaCC - Meta Compiler Compiler v0.3.0.6
----

- 뭔가 진짜 쫌만 더 하면 구현을 할 것 같은 느낌인데 말이야...
> 스타 처리만 남았다. 할 수 있다.

end.


MetaCC - Meta Compiler Compiler v0.3.0.5
----

- 뭔가 진짜 쫌만 더 하면 구현을 할 것 같은 느낌인데 말이야...


end.

MetaCC - Meta Compiler Compiler v0.3.0.4
----

- LIST에 대해 어느 정도 작업이 완료된 것 같다.
> 옵션과 스타에 대해서도 처리하자.


end.

MetaCC - Meta Compiler Compiler v0.3.0.3
----

- glance 작업 완료.
- temporary commit.


end.


MetaCC - Meta Compiler Compiler v0.3.0.2
----

- glance 작업 완료.


end.


MetaCC - Meta Compiler Compiler v0.3.0.1
----

- C++ 전환 완료... 으에엑
- temporary commit.


end.


MetaCC - Meta Compiler Compiler v0.3.0.0 (IMPORTANT)
----

- C++ 전환 완료... 으에엑


end.


MetaCC - Meta Compiler Compiler v0.2.2.3
----

- C++로 바꿀꺼야


end.

MetaCC - Meta Compiler Compiler v0.2.2.2
----

- Too many gotos는 도구를 yacc에서 bison으로 변경하면서 해결.

- 홍진호
- 홍진호

- 다른 문제가 있어요. LIST를 보면, 리스트 안의 내용물이 한 번 출력된 다음에 LIST_0 토큰이 나오는 식입니다. 다른 것도 다 그래요.
> 액션에 옵션을 넣어 문제를 해결해볼 생각입니다.


end.

MetaCC - Meta Compiler Compiler v0.2.2.1
----

- 옵션과 스타에 대한 처리 완료.


! Too many gotos... 문법이 너무 커서 담을 수가 없대요
> identifier라던가 지울 수 있는 문법을 지워봅시다.


end.

MetaCC - Meta Compiler Compiler v0.2.2.0 (IMPORTANT)
----

- 와 진짜 너무 잘 된다 이거 개천재인줄 ㄹㅇ


- 옵션이랑 스타 처리하고 세 개에서 나타나는 토큰에 대한 처리만 추가하자.


end.


MetaCC - Meta Compiler Compiler v0.2.1.5
----

- 액션 출력에 파일 포인터 넣을 거임. 중요한 거야.


end.

MetaCC - Meta Compiler Compiler v0.2.1.4 (IMPORTANT)
----

- Comparer 추가.
> 얼추 작성 완료.
> Almost done.


end.



MetaCC - Meta Compiler Compiler v0.2.1.3
----

- Comparer 추가.
> 얼추 작성 완료.


end.


MetaCC - Meta Compiler Compiler v0.2.1.2 (IMPORTANT)
----

- Comparer 추가.


end.


MetaCC - Meta Compiler Compiler v0.2.1.1
----

- 최초로 컴파일 오류가 없는 파서 생성 완료.
> ...지만 LIST, OPTION, STAR에 대한 경고는 잔뜩 있다. 이걸 해결하지 않으면 소용 없음.


end.


MetaCC - Meta Compiler Compiler v0.2.1.0
----

- 토큰 테이블 생성 완료.


! 파일 복사가 이상한 문제가 있음.
> main.c/print_s2f() 함수.


end.



MetaCC - Meta Compiler Compiler v0.2.0.2
----

- yacc 방식으로 vast 개발 중.
> 템플릿 자동 생성 코드 작성 중.
>> LIST에 대한 자동 생성 코드의 초안 작성됨.

end.

MetaCC - Meta Compiler Compiler v0.2.0.1
----

- yacc 방식으로 vast 개발 중.
> 템플릿 자동 생성 코드 작성 중.

end.


MetaCC - Meta Compiler Compiler v0.2.0.0
----

- yacc 방식으로 vast 개발중.
> 베릴로그 펄 사용법을 잘 모르겠기도 하고, 불완전하다고 써있더라.

end.

MetaCC - Meta Compiler Compiler v0.1.1.1
----

- Verilog-Perl이라고, 이미 더 나은 컴파일러 프로젝트가 있다는 것을 발견했다.
  JavaCC는 LL Parser이고, yacc는 LALR Parser인데 LL Parser보다 LALR Parser가 지원하는 문법의 범위가 더 넓다고 한다.
  그것도 그렇고 Verilog-Perl은 1800-2017 표준을 지원하면서 C/C++도 작성 가능하다고 하니 쓰지 않을 수가 없음.
  원하는 대로 잘 동작한다면 훨씬 안전하고 좋은 일이리라.
  
  바퀴를 다시 만들지 말라는 건 이런 상황을 위한 것일지도 모르겠다.
  1800-2012 프로젝트는 잠정적으로 중단한다.

  뭐 이건 MetaCC 프로젝트고, 얼추 원하는 대로 동작한 바 있다.
  후에 라이선스 등의 문제가 제기될 수 있다면 부활시켜 보자.

end.


MetaCC - Meta Compiler Compiler v0.1.1.0
----

- OPTION 구현 성공!
> 와 개 천재인줄 알았다 ㄹㅇ

end.


MetaCC - Meta Compiler Compiler v0.1.0.2
----

- JavaCC와 Lex & Yacc 출력 분리 중.
> 시범작 나오는 중..이지만 JavaCC를 제대로 하는 게 더 낫겠다 싶다.


end.

MetaCC - Meta Compiler Compiler v0.1.0.1
----

- JavaCC와 Lex & Yacc 출력 분리 중.


- temp commit.


end.


MetaCC - Meta Compiler Compiler v0.1.0.0
----

- JavaCC와 Lex & Yacc 출력 분리 중.


end.


MetaCC - Meta Compiler Compiler v0.0.4.4
----

- JJ 파일 출력... 일단 완료.

- 아직 작업할 게 남았지만 일단 성공이라고 하자.


end.


MetaCC - Meta Compiler Compiler v0.0.4.3
----

- 시스템 베릴로그 문법 진짜 오질라게 많네
> 얼마 안 남았어...!
> almost done. really.


end.

MetaCC - Meta Compiler Compiler v0.0.4.2 (IMPORTANT)
----

- 시스템 베릴로그 문법 진짜 오질라게 많네
> 얼마 안 남았어...!


- 파서에 토큰 데피니션 문법을 넣음.
> 어째 맘에 안 들어서 나중에 빼야 될 것 같다.


end.


MetaCC - Meta Compiler Compiler v0.0.4.1 (IMPORTANT)
----

- 시스템 베릴로그 문법 진짜 오질라게 많네


end.



MetaCC - Meta Compiler Compiler v0.0.4.0
----

- 이제 자동으로 템플릿을 생성할 수 있습니다.


- 섹션 7에 대한 문법 작성 완료.


end.


MetaCC - Meta Compiler Compiler v0.0.3.4
----

- 액션에 대한 초안 작성 완료.


- 심볼 이름으로만 출력되던 것을 실제 심볼의 값을 출력하게끔 변경.


- 자동으로 템플릿을 만들어주게끔 변경해야 함.


end.

MetaCC - Meta Compiler Compiler v0.0.3.3
----

- 나쁘지 않으나 더 발전시켜야 함.
> 그래도 꽤 잘 만들었어. 잘 하고 있다.


end.


MetaCC - Meta Compiler Compiler v0.0.3.2
----

- 최초의 jj 파일 작성 완료!


end.



MetaCC - Meta Compiler Compiler v0.0.3.1
----

- describe 함수 응용해봄.


end.


MetaCC - Meta Compiler Compiler v0.0.3.0
----

- describe 함수 대부분 작성 완료!


end.


MetaCC - Meta Compiler Compiler v0.0.2.4
----

- 타입이 정의되지 않은 추상 구문 트리에 대한 디버그 진행중.


- describe, action 함수들에 대한 템플릿 작성 완료.


end.

MetaCC - Meta Compiler Compiler v0.0.2.3
----

- 추상 구문 트리 템플릿 작업 완료.


end.


MetaCC - Meta Compiler Compiler v0.0.2.2
----

- 심볼 리스트에 대한 초안 작업 완료.


end.


MetaCC - Meta Compiler Compiler v0.0.2.1
----

! 몇 가지 버그 수정 요망.
> 버그 수정 완료!


end.



MetaCC - Meta Compiler Compiler v0.0.2.0 (COMPLETE)
----

- 최초로 동작하는 파서 완성.
> 이후 JavaCC or lex/yacc 등 편한 형태로 변환하는 코드를 작성하면 된다.

! 몇 가지 버그 수정 요망.


end.


MetaCC - Meta Compiler Compiler v0.0.1.0
----

- 환경 준비 완료.


end.



MetaCC - Meta Compiler Compiler v0.0.0.0
----

- initial commit.


end.
